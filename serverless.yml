configValidationMode: off

service:
  name: urlshrtnr

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-prune-plugin
custom:
  prune:
    automatic: true
    number: 3
  shortDomain: ${ssm:/${self:service}/short-domain}
  shortenedLogsBucketName: ${self:service}-${self:provider.stage}-shortenedlogs
  prod:
    domain: ${self:custom.shortDomain}
    maxAge: 3600
    cloudfront: yes
    shortenedPath: '/'
  dev:
    cloudfront: yes
    shortenedPath: '/'
  defaultDomain: ${self:provider.stage}.${self:custom.shortDomain}
  defaultMaxAge: 60
  domain: ${self:custom.${self:provider.stage}.domain, self:custom.defaultDomain}
  maxAge: ${self:custom.${self:provider.stage}.maxAge, self:custom.defaultMaxAge}
  path: ${self:custom.${self:provider.stage}.shortenedPath, "/${self:provider.stage}/"}
  root: https://${self:custom.domain}${self:custom.path}

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  cfnRole: ${cf:UrlShortnerCiIam.CloudformationDeploymentRoleOutput}

  sslCertificate: ${ssm:/${self:service}/ssl-certificate}
  memorySize: 512
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
      Resource: !GetAtt UrlsTable.Arn
    - Effect: "Allow"
      Action:
        - "states:StartExecution"
      Resource:
        Ref: SaveUrlStateMachine
    - Effect: "Allow"
      Action:
        - "states:DescribeExecution"
      Resource: arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:execution:${self:service}-saveUrl-${self:provider.stage}:*
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource: "arn:aws:s3:::${self:service}-${self:provider.stage}-shortenedlogs/*"
  s3:
    shortenedLogs:
      name: ${self:custom.shortenedLogsBucketName}

functions:
  shortenForm:
    handler: management-api.shorteningForm
    environment:
      SHORTENED_PATH: ${self:custom.path}
    events:
      - http: GET /
  shortenUrl:
    handler: management-api.shortenUrl
    environment:
      SHORTENED_PATH: ${self:custom.path}
      SAVE_URL:
        Ref: SaveUrlStateMachine
    events:
      - http: POST shorten
  serveUrl:
    handler: serving-api.serveUrl
    environment:
      TABLE_NAME:
        Ref: UrlsTable
      SHORTENED_ROOT: ${self:custom.root}
      MAX_AGE: ${self:custom.maxAge}
    events:
      - http: GET {shortId}
  retryGuard:
    handler: save-urls.retryGuard
    name: ${self:service}-retryGuard-${self:provider.stage}
  generateId:
    handler: save-urls.generateId
    name: ${self:service}-generateId-${self:provider.stage}
  saveUrl:
    handler: save-urls.saveUrl
    name: ${self:service}-saveUrl-${self:provider.stage}
    environment:
      TABLE_NAME:
        Ref: UrlsTable
  processAccessLogs:
    handler: access-logs.processLog
    environment:
      TABLE_NAME:
        Ref: UrlsTable
    events:
      - s3:
          bucket: shortenedLogs
          event: s3:ObjectCreated:*
          rules:
            - prefix: accesslogs/
            - suffix: .gz


stepFunctions:
  stateMachines:
    saveUrl:
      name: ${self:service}-saveUrl-${self:provider.stage}
      id: SaveUrlStateMachine
      definition:
        Comment: Generate a short id for a URL and respond synchronously
        StartAt: RetryGuard
        States:
          RetryGuard:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-retryGuard-${self:provider.stage}
            Next: RetryCheck
          RetryCheck:
            Type: Choice
            Choices:
              - Variable: $.retries
                NumericGreaterThan: 3
                Next: RetriesExceeded
            Default: GenerateId
          RetriesExceeded:
            Type: Fail
            Cause: Retries Exceeded
          GenerateId:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-generateId-${self:provider.stage}
            Next: SaveUrl
          SaveUrl:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-saveUrl-${self:provider.stage}
            End: true
            Catch:
              - ErrorEquals:
                  - ConditionalCheckFailedException
                ResultPath: "$.error-info"
                Next: RetryGuard

resources:
  Conditions:
    CreateCloudfront:
      Fn::Equals:
        - ${self:custom.${self:provider.stage}.cloudfront, "no"}
        - "yes"
  Resources:
    UrlsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: shortId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: shortId
            KeyType: HASH
    ShortenedLogsPolicy:
      Type: AWS::S3::BucketPolicy
      Condition: CreateCloudfront
      Properties:
        Bucket: ${self:custom.shortenedLogsBucketName}
        PolicyDocument:
          Statement:
            - Action:
                - "s3:PutObject"
              Effect: Allow
              Resource:
                - "arn:aws:s3:::${self:custom.shortenedLogsBucketName}/*"
              Principal:
                CanonicalUser: c4c1ede66af53448b93c283ce9448c4ba468c9432aa01d700d3878632f77d2d0
    ShortenedDistribution:
      Type: AWS::CloudFront::Distribution
      Condition: CreateCloudfront
      DependsOn:
        - S3BucketShortenedLogs
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.domain}
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachedMethods:
              - HEAD
              - GET
            DefaultTTL: 30
            ForwardedValues:
              QueryString: false
            TargetOriginId: api
            ViewerProtocolPolicy: redirect-to-https
          Enabled: true
          HttpVersion: http2
          Logging:
            Bucket: !GetAtt S3BucketShortenedLogs.DomainName
            Prefix: accesslogs/
          Origins:
            - Id: api
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
              DomainName:
                !Sub "#{ApiGatewayRestApi}.execute-api.#{AWS::Region}.#{AWS::URLSuffix}"
              OriginPath: /${self:provider.stage}
          PriceClass: PriceClass_100
          ViewerCertificate:
            AcmCertificateArn: ${self:provider.sslCertificate}
            SslSupportMethod: sni-only
    ShortenedRecordSet:
      Type: AWS::Route53::RecordSet
      Condition: CreateCloudfront
      Properties:
        AliasTarget:
          DNSName: !GetAtt ShortenedDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2
        HostedZoneName: ${self:custom.shortDomain}.
        Name: ${self:custom.domain}.
        Type: A

  Outputs:
    DomainName:
      Value: !If
        - CreateCloudfront
        - !Ref ShortenedRecordSet
        - !Sub "https://#{ApiGatewayRestApi}.execute-api.#{AWS::Region}.#{AWS::URLSuffix}/${self:provider.stage}"
      Export:
        Name: ${self:service}-${self:provider.stage}-domain-name